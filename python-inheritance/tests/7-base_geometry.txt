>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

# Initialize BaseGeometry instance
>>> bg = BaseGeometry()

# Valid integer_validator tests
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

# Invalid integer_validator tests - ValueError
>>> try:
...     bg.integer_validator("property", -2)
... except ValueError as e:
...     print(f"{e}")
property must be greater than 0

>>> try:
...     bg.integer_validator("property", 0)
... except ValueError as e:
...     print(f"{e}")
property must be greater than 0

# Invalid integer_validator tests - TypeError
>>> try:
...     bg.integer_validator("property", "string")
... except TypeError as e:
...     print(f"{e}")
property must be an integer

>>> try:
...     bg.integer_validator("property", [])
... except TypeError as e:
...     print(f"{e}")
property must be an integer

>>> try:
...     bg.integer_validator("property", [1])
... except TypeError as e:
...     print(f"{e}")
property must be an integer

>>> try:
...     bg.integer_validator("property", (1,))
>>> except TypeError as e:
...     print(f"{e}")

>>> try:
...     bg.integer_validator("property", (1, 2))
... except TypeError as e:
...     print(f"{e}")
property must be an integer

>>> try:
...     bg.integer_validator("property", {})
... except TypeError as e:
...     print(f"{e}")
property must be an integer

>>> try:
...     bg.integer_validator("property")
... except TypeError as e:
...     print(f"{e}")
integer_validator() missing 1 required positional argument: 'value'

>>> try:
...     bg.integer_validator()
... except TypeError as e:
...     print(f"{e}")
integer_validator() missing 2 required positional arguments: 'name' and 'value'

# Floating point value test
>>> try:
...     bg.integer_validator("property", 1.0)
... except TypeError as e:
...     print(f"{e}")
property must be an integer
